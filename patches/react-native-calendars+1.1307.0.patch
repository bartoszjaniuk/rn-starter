diff --git a/node_modules/react-native-calendars/src/calendar/day/dot/style.js b/node_modules/react-native-calendars/src/calendar/day/dot/style.js
index 69802cc..a40f84c 100644
--- a/node_modules/react-native-calendars/src/calendar/day/dot/style.js
+++ b/node_modules/react-native-calendars/src/calendar/day/dot/style.js
@@ -1,33 +1,35 @@
 import { StyleSheet } from 'react-native';
+
 import * as defaultStyle from '../../../style';
+
 export default function styleConstructor(theme = {}) {
-    const appStyle = { ...defaultStyle, ...theme };
-    return StyleSheet.create({
-        dot: {
-            width: 4,
-            height: 4,
-            marginTop: 1,
-            marginHorizontal: 1,
-            borderRadius: 2,
-            opacity: 0,
-            ...appStyle.dotStyle
-        },
-        visibleDot: {
-            opacity: 1,
-            backgroundColor: appStyle.dotColor
-        },
-        selectedDot: {
-            backgroundColor: appStyle.selectedDotColor
-        },
-        disabledDot: {
-            backgroundColor: appStyle.disabledDotColor || appStyle.dotColor
-        },
-        inactiveDot: {
-            backgroundColor: appStyle.inactiveDotColor || appStyle.dotColor
-        },
-        todayDot: {
-            backgroundColor: appStyle.todayDotColor || appStyle.dotColor
-        },
-        ...(theme['stylesheet.dot'] || {})
-    });
+  const appStyle = { ...defaultStyle, ...theme };
+  return StyleSheet.create({
+    dot: {
+      width: 8,
+      height: 8,
+      marginTop: 12,
+      marginHorizontal: 1,
+      borderRadius: 8,
+      opacity: 0,
+      ...appStyle.dotStyle,
+    },
+    visibleDot: {
+      opacity: 1,
+      backgroundColor: appStyle.dotColor,
+    },
+    selectedDot: {
+      backgroundColor: appStyle.selectedDotColor,
+    },
+    disabledDot: {
+      backgroundColor: appStyle.disabledDotColor || appStyle.dotColor,
+    },
+    inactiveDot: {
+      backgroundColor: appStyle.inactiveDotColor || appStyle.dotColor,
+    },
+    todayDot: {
+      backgroundColor: appStyle.todayDotColor || appStyle.dotColor,
+    },
+    ...(theme['stylesheet.dot'] || {}),
+  });
 }
diff --git a/node_modules/react-native-calendars/src/calendar/header/index.js b/node_modules/react-native-calendars/src/calendar/header/index.js
index bd75364..51a839f 100644
--- a/node_modules/react-native-calendars/src/calendar/header/index.js
+++ b/node_modules/react-native-calendars/src/calendar/header/index.js
@@ -1,129 +1,196 @@
+import React, { Fragment, forwardRef, useCallback, useImperativeHandle, useMemo, useRef } from 'react';
+import { ActivityIndicator, Image, Platform, Text, TouchableOpacity, View } from 'react-native';
+
 import includes from 'lodash/includes';
 import XDate from 'xdate';
-import React, { Fragment, useCallback, useMemo, forwardRef, useImperativeHandle, useRef } from 'react';
-import { ActivityIndicator, Platform, View, Text, TouchableOpacity, Image } from 'react-native';
-import { formatNumbers, weekDayNames } from '../../dateutils';
+
 import styleConstructor from './style';
+
+import { formatNumbers, weekDayNames } from '../../dateutils';
+
 const accessibilityActions = [
-    { name: 'increment', label: 'increment' },
-    { name: 'decrement', label: 'decrement' }
+  { name: 'increment', label: 'increment' },
+  { name: 'decrement', label: 'decrement' },
 ];
 const CalendarHeader = forwardRef((props, ref) => {
-    const { theme, style: propsStyle, addMonth: propsAddMonth, month, monthFormat, firstDay, hideDayNames, showWeekNumbers, hideArrows, renderArrow, onPressArrowLeft, onPressArrowRight, arrowsHitSlop = 20, disableArrowLeft, disableArrowRight, disabledDaysIndexes, displayLoadingIndicator, customHeaderTitle, renderHeader, webAriaLevel, testID, accessibilityElementsHidden, importantForAccessibility, numberOfDays, current = '', timelineLeftInset } = props;
-    const numberOfDaysCondition = useMemo(() => {
-        return numberOfDays && numberOfDays > 1;
-    }, [numberOfDays]);
-    const style = useRef(styleConstructor(theme));
-    const headerStyle = useMemo(() => {
-        return [style.current.header, numberOfDaysCondition ? style.current.partialHeader : undefined];
-    }, [numberOfDaysCondition]);
-    const partialWeekStyle = useMemo(() => {
-        return [style.current.partialWeek, { paddingLeft: timelineLeftInset }];
-    }, [timelineLeftInset]);
-    const dayNamesStyle = useMemo(() => {
-        return [style.current.week, numberOfDaysCondition ? partialWeekStyle : undefined];
-    }, [numberOfDaysCondition, partialWeekStyle]);
-    const hitSlop = useMemo(() => typeof arrowsHitSlop === 'number'
+  const {
+    theme,
+    style: propsStyle,
+    addMonth: propsAddMonth,
+    month,
+    monthFormat,
+    firstDay,
+    hideDayNames,
+    showWeekNumbers,
+    hideArrows,
+    renderArrow,
+    onPressArrowLeft,
+    onPressArrowRight,
+    arrowsHitSlop = 20,
+    disableArrowLeft,
+    disableArrowRight,
+    disabledDaysIndexes,
+    displayLoadingIndicator,
+    customHeaderTitle,
+    renderHeader,
+    webAriaLevel,
+    testID,
+    accessibilityElementsHidden,
+    importantForAccessibility,
+    numberOfDays,
+    current = '',
+    timelineLeftInset,
+  } = props;
+  const numberOfDaysCondition = useMemo(() => {
+    return numberOfDays && numberOfDays > 1;
+  }, [numberOfDays]);
+  const style = useRef(styleConstructor(theme));
+  const headerStyle = useMemo(() => {
+    return [style.current.header, numberOfDaysCondition ? style.current.partialHeader : undefined];
+  }, [numberOfDaysCondition]);
+  const partialWeekStyle = useMemo(() => {
+    return [style.current.partialWeek, { paddingLeft: timelineLeftInset }];
+  }, [timelineLeftInset]);
+  const dayNamesStyle = useMemo(() => {
+    return [style.current.week, numberOfDaysCondition ? partialWeekStyle : undefined];
+  }, [numberOfDaysCondition, partialWeekStyle]);
+  const hitSlop = useMemo(
+    () =>
+      typeof arrowsHitSlop === 'number'
         ? { top: arrowsHitSlop, left: arrowsHitSlop, bottom: arrowsHitSlop, right: arrowsHitSlop }
-        : arrowsHitSlop, [arrowsHitSlop]);
-    useImperativeHandle(ref, () => ({
-        onPressLeft,
-        onPressRight
-    }));
-    const addMonth = useCallback(() => {
-        propsAddMonth?.(1);
-    }, [propsAddMonth]);
-    const subtractMonth = useCallback(() => {
-        propsAddMonth?.(-1);
-    }, [propsAddMonth]);
-    const onPressLeft = useCallback(() => {
-        if (typeof onPressArrowLeft === 'function') {
-            return onPressArrowLeft(subtractMonth, month);
-        }
-        return subtractMonth();
-    }, [onPressArrowLeft, subtractMonth, month]);
-    const onPressRight = useCallback(() => {
-        if (typeof onPressArrowRight === 'function') {
-            return onPressArrowRight(addMonth, month);
-        }
-        return addMonth();
-    }, [onPressArrowRight, addMonth, month]);
-    const onAccessibilityAction = useCallback((event) => {
-        switch (event.nativeEvent.actionName) {
-            case 'decrement':
-                onPressLeft();
-                break;
-            case 'increment':
-                onPressRight();
-                break;
-            default:
-                break;
-        }
-    }, [onPressLeft, onPressRight]);
-    const renderWeekDays = useMemo(() => {
-        const dayOfTheWeek = new XDate(current).getDay();
-        const weekDaysNames = numberOfDaysCondition ? weekDayNames(dayOfTheWeek) : weekDayNames(firstDay);
-        const dayNames = numberOfDaysCondition ? weekDaysNames.slice(0, numberOfDays) : weekDaysNames;
-        return dayNames.map((day, index) => {
-            const dayStyle = [style.current.dayHeader];
-            if (includes(disabledDaysIndexes, index)) {
-                dayStyle.push(style.current.disabledDayHeader);
-            }
-            const dayTextAtIndex = `dayTextAtIndex${index}`;
-            if (style.current[dayTextAtIndex]) {
-                dayStyle.push(style.current[dayTextAtIndex]);
-            }
-            return (<Text allowFontScaling={false} key={index} style={dayStyle} numberOfLines={1} accessibilityLabel={''}>
+        : arrowsHitSlop,
+    [arrowsHitSlop],
+  );
+  useImperativeHandle(ref, () => ({
+    onPressLeft,
+    onPressRight,
+  }));
+  const addMonth = useCallback(() => {
+    propsAddMonth?.(1);
+  }, [propsAddMonth]);
+  const subtractMonth = useCallback(() => {
+    propsAddMonth?.(-1);
+  }, [propsAddMonth]);
+  const onPressLeft = useCallback(() => {
+    if (typeof onPressArrowLeft === 'function') {
+      return onPressArrowLeft(subtractMonth, month);
+    }
+    return subtractMonth();
+  }, [onPressArrowLeft, subtractMonth, month]);
+  const onPressRight = useCallback(() => {
+    if (typeof onPressArrowRight === 'function') {
+      return onPressArrowRight(addMonth, month);
+    }
+    return addMonth();
+  }, [onPressArrowRight, addMonth, month]);
+  const onAccessibilityAction = useCallback(
+    (event) => {
+      switch (event.nativeEvent.actionName) {
+        case 'decrement':
+          onPressLeft();
+          break;
+        case 'increment':
+          onPressRight();
+          break;
+        default:
+          break;
+      }
+    },
+    [onPressLeft, onPressRight],
+  );
+  const renderWeekDays = useMemo(() => {
+    const dayOfTheWeek = new XDate(current).getDay();
+    const weekDaysNames = numberOfDaysCondition ? weekDayNames(dayOfTheWeek) : weekDayNames(firstDay);
+    const dayNames = numberOfDaysCondition ? weekDaysNames.slice(0, numberOfDays) : weekDaysNames;
+    return dayNames.map((day, index) => {
+      const dayStyle = [style.current.dayHeader];
+      if (includes(disabledDaysIndexes, index)) {
+        dayStyle.push(style.current.disabledDayHeader);
+      }
+      const dayTextAtIndex = `dayTextAtIndex${index}`;
+      if (style.current[dayTextAtIndex]) {
+        dayStyle.push(style.current[dayTextAtIndex]);
+      }
+      return (
+        <Text allowFontScaling={false} key={index} style={dayStyle} numberOfLines={1} accessibilityLabel={''}>
           {day}
-        </Text>);
-        });
-    }, [firstDay, current, numberOfDaysCondition, numberOfDays, disabledDaysIndexes]);
-    const _renderHeader = () => {
-        const webProps = Platform.OS === 'web' ? { 'aria-level': webAriaLevel } : {};
-        if (renderHeader) {
-            return renderHeader(month);
-        }
-        if (customHeaderTitle) {
-            return customHeaderTitle;
-        }
-        return (<Fragment>
+        </Text>
+      );
+    });
+  }, [firstDay, current, numberOfDaysCondition, numberOfDays, disabledDaysIndexes]);
+  const _renderHeader = () => {
+    const webProps = Platform.OS === 'web' ? { 'aria-level': webAriaLevel } : {};
+    if (renderHeader) {
+      return renderHeader(month);
+    }
+    if (customHeaderTitle) {
+      return customHeaderTitle;
+    }
+    return (
+      <Fragment>
         <Text allowFontScaling={false} style={style.current.monthText} testID={`${testID}.title`} {...webProps}>
           {formatNumbers(month?.toString(monthFormat))}
         </Text>
-      </Fragment>);
-    };
-    const _renderArrow = (direction) => {
-        if (hideArrows) {
-            return <View />;
-        }
-        const isLeft = direction === 'left';
-        const arrowId = isLeft ? 'leftArrow' : 'rightArrow';
-        const shouldDisable = isLeft ? disableArrowLeft : disableArrowRight;
-        const onPress = !shouldDisable ? isLeft ? onPressLeft : onPressRight : undefined;
-        const imageSource = isLeft ? require('../img/previous.png') : require('../img/next.png');
-        const renderArrowDirection = isLeft ? 'left' : 'right';
-        return (<TouchableOpacity onPress={onPress} disabled={shouldDisable} style={style.current.arrow} hitSlop={hitSlop} testID={`${testID}.${arrowId}`}>
-        {renderArrow ? (renderArrow(renderArrowDirection)) : (<Image source={imageSource} style={shouldDisable ? style.current.disabledArrowImage : style.current.arrowImage}/>)}
-      </TouchableOpacity>);
-    };
-    const renderIndicator = () => {
-        if (displayLoadingIndicator) {
-            return (<ActivityIndicator color={theme?.indicatorColor} testID={`${testID}.loader`}/>);
-        }
-    };
-    const renderWeekNumbersSpace = () => {
-        return showWeekNumbers && <View style={style.current.dayHeader}/>;
-    };
-    const renderDayNames = () => {
-        if (!hideDayNames) {
-            return (<View style={dayNamesStyle} testID={`${testID}.dayNames`}>
+      </Fragment>
+    );
+  };
+  const _renderArrow = (direction) => {
+    if (hideArrows) {
+      return <View />;
+    }
+    const isLeft = direction === 'left';
+    const arrowId = isLeft ? 'leftArrow' : 'rightArrow';
+    const shouldDisable = isLeft ? disableArrowLeft : disableArrowRight;
+    const onPress = !shouldDisable ? (isLeft ? onPressLeft : onPressRight) : undefined;
+    const imageSource = isLeft ? require('../img/previous.png') : require('../img/next.png');
+    const renderArrowDirection = isLeft ? 'left' : 'right';
+    return (
+      <TouchableOpacity
+        onPress={onPress}
+        disabled={shouldDisable}
+        style={style.current.arrow}
+        hitSlop={hitSlop}
+        testID={`${testID}.${arrowId}`}
+      >
+        {renderArrow ? (
+          renderArrow(renderArrowDirection)
+        ) : (
+          <Image
+            source={imageSource}
+            style={shouldDisable ? style.current.disabledArrowImage : style.current.arrowImage}
+          />
+        )}
+      </TouchableOpacity>
+    );
+  };
+  const renderIndicator = () => {
+    if (displayLoadingIndicator) {
+      return <ActivityIndicator color={theme?.indicatorColor} testID={`${testID}.loader`} />;
+    }
+  };
+  const renderWeekNumbersSpace = () => {
+    return showWeekNumbers && <View style={style.current.dayHeader} />;
+  };
+  const renderDayNames = () => {
+    if (!hideDayNames) {
+      return (
+        <View style={dayNamesStyle} testID={`${testID}.dayNames`}>
           {renderWeekNumbersSpace()}
           {renderWeekDays}
-        </View>);
-        }
-    };
-    return (<View testID={testID} style={propsStyle} accessible accessibilityRole={'adjustable'} accessibilityActions={accessibilityActions} onAccessibilityAction={onAccessibilityAction} accessibilityElementsHidden={accessibilityElementsHidden} // iOS
-     importantForAccessibility={importantForAccessibility} // Android
+        </View>
+      );
+    }
+  };
+  return (
+    <View
+      testID={testID}
+      style={propsStyle}
+      accessible
+      accessibilityRole={'adjustable'}
+      accessibilityActions={accessibilityActions}
+      onAccessibilityAction={onAccessibilityAction}
+      accessibilityElementsHidden={accessibilityElementsHidden} // iOS
+      importantForAccessibility={importantForAccessibility} // Android
     >
       <View style={headerStyle}>
         {_renderArrow('left')}
@@ -134,12 +201,13 @@ const CalendarHeader = forwardRef((props, ref) => {
         {_renderArrow('right')}
       </View>
       {renderDayNames()}
-    </View>);
+    </View>
+  );
 });
 export default CalendarHeader;
 CalendarHeader.displayName = 'CalendarHeader';
 CalendarHeader.defaultProps = {
-    monthFormat: 'MMMM yyyy',
-    webAriaLevel: 1,
-    arrowsHitSlop: 20
+  monthFormat: 'MMMM',
+  webAriaLevel: 1,
+  arrowsHitSlop: 20,
 };
diff --git a/node_modules/react-native-calendars/src/calendar/header/style.js b/node_modules/react-native-calendars/src/calendar/header/style.js
index 2b6e01c..220f465 100644
--- a/node_modules/react-native-calendars/src/calendar/header/style.js
+++ b/node_modules/react-native-calendars/src/calendar/header/style.js
@@ -1,70 +1,74 @@
-import { StyleSheet, Platform } from 'react-native';
-import * as defaultStyle from '../../style';
+import { Platform, StyleSheet } from 'react-native';
+
 import constants from '../../commons/constants';
+import * as defaultStyle from '../../style';
+
 export default function (theme = {}) {
-    const appStyle = { ...defaultStyle, ...theme };
-    const rtlStyle = constants.isRTL ? { transform: [{ scaleX: -1 }] } : undefined;
-    return StyleSheet.create({
-        header: {
-            flexDirection: 'row',
-            justifyContent: 'space-between',
-            paddingLeft: 10,
-            paddingRight: 10,
-            marginTop: 6,
-            alignItems: 'center',
-        },
-        partialHeader: {
-            paddingHorizontal: 15
-        },
-        headerContainer: {
-            flexDirection: 'row'
-        },
-        monthText: {
-            fontSize: appStyle.textMonthFontSize,
-            fontFamily: appStyle.textMonthFontFamily,
-            fontWeight: appStyle.textMonthFontWeight,
-            color: appStyle.monthTextColor,
-            margin: 10
-        },
-        arrow: {
-            padding: 10,
-            ...appStyle.arrowStyle
-        },
-        arrowImage: {
-            ...rtlStyle,
-            tintColor: appStyle.arrowColor,
-            ...Platform.select({
-                web: {
-                    width: appStyle.arrowWidth,
-                    height: appStyle.arrowHeight
-                }
-            })
-        },
-        disabledArrowImage: {
-            ...rtlStyle,
-            tintColor: appStyle.disabledArrowColor
-        },
-        week: {
-            marginTop: 7,
-            flexDirection: 'row',
-            justifyContent: 'space-around',
-        },
-        partialWeek: {
-            paddingRight: 0
-        },
-        dayHeader: {
-            marginTop: 2,
-            marginBottom: 7,
-            width: 32,
-            textAlign: 'center',
-            fontSize: appStyle.textDayHeaderFontSize,
-            fontFamily: appStyle.textDayHeaderFontFamily,
-            fontWeight: appStyle.textDayHeaderFontWeight,
-            color: appStyle.textSectionTitleColor
-        },
-        disabledDayHeader: {
-            color: appStyle.textSectionTitleDisabledColor
+  const appStyle = { ...defaultStyle, ...theme };
+  const rtlStyle = constants.isRTL ? { transform: [{ scaleX: -1 }] } : undefined;
+  return StyleSheet.create({
+    header: {
+      flexDirection: 'row',
+      justifyContent: 'space-between',
+      paddingLeft: 10,
+      paddingRight: 10,
+      marginTop: 6,
+      alignItems: 'center',
+    },
+    partialHeader: {
+      paddingHorizontal: 15,
+    },
+    headerContainer: {
+      flexDirection: 'row',
+    },
+    monthText: {
+      fontSize: appStyle.textMonthFontSize,
+      fontFamily: appStyle.textMonthFontFamily,
+      fontWeight: appStyle.textMonthFontWeight,
+      color: appStyle.monthTextColor,
+      flex: 1,
+      textAlign: 'right',
+      margin: 10,
+    },
+    arrow: {
+      padding: 10,
+      ...appStyle.arrowStyle,
+    },
+    arrowImage: {
+      ...rtlStyle,
+      tintColor: appStyle.arrowColor,
+      ...Platform.select({
+        web: {
+          width: appStyle.arrowWidth,
+          height: appStyle.arrowHeight,
         },
-        ...(theme['stylesheet.calendar.header'] || {})
-    });
+      }),
+    },
+    disabledArrowImage: {
+      ...rtlStyle,
+      tintColor: appStyle.disabledArrowColor,
+    },
+    week: {
+      marginTop: 7,
+      flexDirection: 'row',
+      justifyContent: 'space-around',
+    },
+    partialWeek: {
+      paddingRight: 0,
+    },
+    dayHeader: {
+      marginTop: 2,
+      marginBottom: 7,
+      width: 32,
+      textAlign: 'center',
+      fontSize: appStyle.textDayHeaderFontSize,
+      fontFamily: appStyle.textDayHeaderFontFamily,
+      fontWeight: appStyle.textDayHeaderFontWeight,
+      color: appStyle.textSectionTitleColor,
+    },
+    disabledDayHeader: {
+      color: appStyle.textSectionTitleDisabledColor,
+    },
+    ...(theme['stylesheet.calendar.header'] || {}),
+  });
 }
diff --git a/node_modules/react-native-calendars/src/calendar/index.js b/node_modules/react-native-calendars/src/calendar/index.js
index 6f46e8a..303bb40 100644
--- a/node_modules/react-native-calendars/src/calendar/index.js
+++ b/node_modules/react-native-calendars/src/calendar/index.js
@@ -1,188 +1,270 @@
-import PropTypes from 'prop-types';
-import XDate from 'xdate';
-import isEmpty from 'lodash/isEmpty';
-import React, { useRef, useState, useEffect, useCallback, useMemo } from 'react';
+import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';
 import { View } from 'react-native';
 // @ts-expect-error
 import GestureRecognizer, { swipeDirections } from 'react-native-swipe-gestures';
+
+import isEmpty from 'lodash/isEmpty';
+import PropTypes from 'prop-types';
+import XDate from 'xdate';
+
+import BasicDay from './day/basic';
+import Day from './day/index';
+import CalendarHeader from './header';
+import styleConstructor from './style';
+
 import constants from '../commons/constants';
-import { page, isGTE, isLTE, sameMonth } from '../dateutils';
-import { xdateToData, parseDate, toMarkingFormat } from '../interface';
+import { extractDayProps, extractHeaderProps } from '../componentUpdater';
+import { isGTE, isLTE, page, sameMonth } from '../dateutils';
 import { getState } from '../day-state-manager';
-import { extractHeaderProps, extractDayProps } from '../componentUpdater';
 import { useDidUpdate } from '../hooks';
-import styleConstructor from './style';
-import CalendarHeader from './header';
-import Day from './day/index';
-import BasicDay from './day/basic';
+import { parseDate, toMarkingFormat, xdateToData } from '../interface';
+
 /**
  * @description: Calendar component
  * @example: https://github.com/wix/react-native-calendars/blob/master/example/src/screens/calendars.js
  * @gif: https://github.com/wix/react-native-calendars/blob/master/demo/assets/calendar.gif
  */
 const Calendar = (props) => {
-    const { initialDate, current, theme, markedDates, minDate, maxDate, allowSelectionOutOfRange, onDayPress, onDayLongPress, onMonthChange, onVisibleMonthsChange, disableMonthChange, enableSwipeMonths, hideExtraDays, firstDay, showSixWeeks, displayLoadingIndicator, customHeader, headerStyle, accessibilityElementsHidden, importantForAccessibility, testID, style: propsStyle } = props;
-    const [currentMonth, setCurrentMonth] = useState(current || initialDate ? parseDate(current || initialDate) : new XDate());
-    const style = useRef(styleConstructor(theme));
-    const header = useRef();
-    const weekNumberMarking = useRef({ disabled: true, disableTouchEvent: true });
-    useEffect(() => {
-        if (initialDate) {
-            setCurrentMonth(parseDate(initialDate));
-        }
-    }, [initialDate]);
-    useDidUpdate(() => {
-        const _currentMonth = currentMonth.clone();
-        onMonthChange?.(xdateToData(_currentMonth));
-        onVisibleMonthsChange?.([xdateToData(_currentMonth)]);
-    }, [currentMonth]);
-    const updateMonth = useCallback((newMonth) => {
-        if (sameMonth(newMonth, currentMonth)) {
-            return;
+  const {
+    initialDate,
+    current,
+    theme,
+    markedDates,
+    minDate,
+    maxDate,
+    allowSelectionOutOfRange,
+    onDayPress,
+    onDayLongPress,
+    onMonthChange,
+    onVisibleMonthsChange,
+    disableMonthChange,
+    enableSwipeMonths,
+    hideExtraDays,
+    firstDay,
+    showSixWeeks,
+    displayLoadingIndicator,
+    customHeader,
+    headerStyle,
+    accessibilityElementsHidden,
+    importantForAccessibility,
+    testID,
+    style: propsStyle,
+  } = props;
+  const [currentMonth, setCurrentMonth] = useState(
+    current || initialDate ? parseDate(current || initialDate) : new XDate(),
+  );
+  const style = useRef(styleConstructor(theme));
+  const header = useRef();
+  const weekNumberMarking = useRef({ disabled: true, disableTouchEvent: true });
+  useEffect(() => {
+    if (initialDate) {
+      setCurrentMonth(parseDate(initialDate));
+    }
+  }, [initialDate]);
+  useDidUpdate(() => {
+    const _currentMonth = currentMonth.clone();
+    onMonthChange?.(xdateToData(_currentMonth));
+    onVisibleMonthsChange?.([xdateToData(_currentMonth)]);
+  }, [currentMonth]);
+  const updateMonth = useCallback(
+    (newMonth) => {
+      if (sameMonth(newMonth, currentMonth)) {
+        return;
+      }
+      setCurrentMonth(newMonth);
+    },
+    [currentMonth],
+  );
+  const addMonth = useCallback(
+    (count) => {
+      const newMonth = currentMonth.clone().addMonths(count, true);
+      updateMonth(newMonth);
+    },
+    [currentMonth, updateMonth],
+  );
+  const handleDayInteraction = useCallback(
+    (date, interaction) => {
+      const day = new XDate(date.dateString);
+      if (
+        allowSelectionOutOfRange ||
+        (!(minDate && !isGTE(day, new XDate(minDate))) && !(maxDate && !isLTE(day, new XDate(maxDate))))
+      ) {
+        if (!disableMonthChange) {
+          updateMonth(day);
         }
-        setCurrentMonth(newMonth);
-    }, [currentMonth]);
-    const addMonth = useCallback((count) => {
-        const newMonth = currentMonth.clone().addMonths(count, true);
-        updateMonth(newMonth);
-    }, [currentMonth, updateMonth]);
-    const handleDayInteraction = useCallback((date, interaction) => {
-        const day = new XDate(date.dateString);
-        if (allowSelectionOutOfRange || !(minDate && !isGTE(day, new XDate(minDate))) && !(maxDate && !isLTE(day, new XDate(maxDate)))) {
-            if (!disableMonthChange) {
-                updateMonth(day);
-            }
-            if (interaction) {
-                interaction(date);
-            }
+        if (interaction) {
+          interaction(date);
         }
-    }, [minDate, maxDate, allowSelectionOutOfRange, disableMonthChange, updateMonth]);
-    const _onDayPress = useCallback((date) => {
-        if (date)
-            handleDayInteraction(date, onDayPress);
-    }, [handleDayInteraction, onDayPress]);
-    const onLongPressDay = useCallback((date) => {
-        if (date)
-            handleDayInteraction(date, onDayLongPress);
-    }, [handleDayInteraction, onDayLongPress]);
-    const onSwipeLeft = useCallback(() => {
-        // @ts-expect-error
-        header.current?.onPressRight();
-    }, [header]);
-    const onSwipeRight = useCallback(() => {
-        // @ts-expect-error
-        header.current?.onPressLeft();
-    }, [header]);
-    const onSwipe = useCallback((gestureName) => {
-        const { SWIPE_UP, SWIPE_DOWN, SWIPE_LEFT, SWIPE_RIGHT } = swipeDirections;
-        switch (gestureName) {
-            case SWIPE_UP:
-            case SWIPE_DOWN:
-                break;
-            case SWIPE_LEFT:
-                constants.isRTL ? onSwipeRight() : onSwipeLeft();
-                break;
-            case SWIPE_RIGHT:
-                constants.isRTL ? onSwipeLeft() : onSwipeRight();
-                break;
-        }
-    }, [onSwipeLeft, onSwipeRight]);
-    const renderWeekNumber = (weekNumber) => {
-        return (<View style={style.current.dayContainer} key={`week-container-${weekNumber}`}>
-        <BasicDay key={`week-${weekNumber}`} marking={weekNumberMarking.current} 
-        // state='disabled'
-        theme={theme} testID={`${testID}.weekNumber_${weekNumber}`}>
+      }
+    },
+    [minDate, maxDate, allowSelectionOutOfRange, disableMonthChange, updateMonth],
+  );
+  const _onDayPress = useCallback(
+    (date) => {
+      if (date) handleDayInteraction(date, onDayPress);
+    },
+    [handleDayInteraction, onDayPress],
+  );
+  const onLongPressDay = useCallback(
+    (date) => {
+      if (date) handleDayInteraction(date, onDayLongPress);
+    },
+    [handleDayInteraction, onDayLongPress],
+  );
+  const onSwipeLeft = useCallback(() => {
+    // @ts-expect-error
+    header.current?.onPressRight();
+  }, [header]);
+  const onSwipeRight = useCallback(() => {
+    // @ts-expect-error
+    header.current?.onPressLeft();
+  }, [header]);
+  const onSwipe = useCallback(
+    (gestureName) => {
+      const { SWIPE_UP, SWIPE_DOWN, SWIPE_LEFT, SWIPE_RIGHT } = swipeDirections;
+      switch (gestureName) {
+        case SWIPE_UP:
+        case SWIPE_DOWN:
+          break;
+        case SWIPE_LEFT:
+          constants.isRTL ? onSwipeRight() : onSwipeLeft();
+          break;
+        case SWIPE_RIGHT:
+          constants.isRTL ? onSwipeLeft() : onSwipeRight();
+          break;
+      }
+    },
+    [onSwipeLeft, onSwipeRight],
+  );
+  const renderWeekNumber = (weekNumber) => {
+    return (
+      <View style={style.current.dayContainer} key={`week-container-${weekNumber}`}>
+        <BasicDay
+          key={`week-${weekNumber}`}
+          marking={weekNumberMarking.current}
+          // state='disabled'
+          theme={theme}
+          testID={`${testID}.weekNumber_${weekNumber}`}
+        >
           {weekNumber}
         </BasicDay>
-      </View>);
-    };
-    const renderDay = (day, id) => {
-        const dayProps = extractDayProps(props);
-        if (!sameMonth(day, currentMonth) && hideExtraDays) {
-            return <View key={id} style={style.current.emptyDayContainer}/>;
-        }
-        const dateString = toMarkingFormat(day);
-        const isControlled = isEmpty(props.context);
-        return (<View style={style.current.dayContainer} key={id}>
-        <Day {...dayProps} testID={`${testID}.day_${dateString}`} date={dateString} state={getState(day, currentMonth, props, isControlled)} marking={markedDates?.[dateString]} onPress={_onDayPress} onLongPress={onLongPressDay}/>
-      </View>);
-    };
-    const renderWeek = (days, id) => {
-        const week = [];
-        days.forEach((day, id2) => {
-            week.push(renderDay(day, id2));
-        }, this);
-        if (props.showWeekNumbers) {
-            week.unshift(renderWeekNumber(days[days.length - 1].getWeek()));
-        }
-        return (<View style={style.current.week} key={id}>
+      </View>
+    );
+  };
+  const renderDay = (day, id) => {
+    const dayProps = extractDayProps(props);
+    if (!sameMonth(day, currentMonth) && hideExtraDays) {
+      return <View key={id} style={style.current.emptyDayContainer} />;
+    }
+    const dateString = toMarkingFormat(day);
+    const isControlled = isEmpty(props.context);
+    return (
+      <View style={style.current.dayContainer} key={id}>
+        <Day
+          {...dayProps}
+          testID={`${testID}.day_${dateString}`}
+          date={dateString}
+          state={getState(day, currentMonth, props, isControlled)}
+          marking={markedDates?.[dateString]}
+          onPress={_onDayPress}
+          onLongPress={onLongPressDay}
+        />
+      </View>
+    );
+  };
+  const renderWeek = (days, id) => {
+    const week = [];
+    days.forEach((day, id2) => {
+      week.push(renderDay(day, id2));
+    }, this);
+    if (props.showWeekNumbers) {
+      week.unshift(renderWeekNumber(days[days.length - 1].getWeek()));
+    }
+    return (
+      <View style={style.current.week} key={id}>
         {week}
-      </View>);
-    };
-    const renderMonth = () => {
-        const shouldShowSixWeeks = showSixWeeks && !hideExtraDays;
-        const days = page(currentMonth, firstDay, shouldShowSixWeeks);
-        const weeks = [];
-        while (days.length) {
-            weeks.push(renderWeek(days.splice(0, 7), weeks.length));
-        }
-        return <View style={style.current.monthView}>{weeks}</View>;
-    };
-    const shouldDisplayIndicator = useMemo(() => {
-        if (currentMonth) {
-            const lastMonthOfDay = toMarkingFormat(currentMonth.clone().addMonths(1, true).setDate(1).addDays(-1));
-            if (displayLoadingIndicator && !markedDates?.[lastMonthOfDay]) {
-                return true;
-            }
-        }
-        return false;
-    }, [currentMonth, displayLoadingIndicator, markedDates]);
-    const renderHeader = () => {
-        const headerProps = extractHeaderProps(props);
-        const ref = customHeader ? undefined : header;
-        const CustomHeader = customHeader;
-        const HeaderComponent = customHeader ? CustomHeader : CalendarHeader;
-        return (<HeaderComponent {...headerProps} testID={`${testID}.header`} style={headerStyle} ref={ref} month={currentMonth} addMonth={addMonth} displayLoadingIndicator={shouldDisplayIndicator}/>);
-    };
-    const GestureComponent = enableSwipeMonths ? GestureRecognizer : View;
-    const swipeProps = {
-        onSwipe: (direction) => onSwipe(direction)
-    };
-    const gestureProps = enableSwipeMonths ? swipeProps : undefined;
-    return (<GestureComponent {...gestureProps}>
-      <View style={[style.current.container, propsStyle]} testID={testID} accessibilityElementsHidden={accessibilityElementsHidden} // iOS
-     importantForAccessibility={importantForAccessibility} // Android
-    >
+      </View>
+    );
+  };
+  const renderMonth = () => {
+    const shouldShowSixWeeks = showSixWeeks && !hideExtraDays;
+    const days = page(currentMonth, firstDay, shouldShowSixWeeks);
+    const weeks = [];
+    while (days.length) {
+      weeks.push(renderWeek(days.splice(0, 7), weeks.length));
+    }
+    return <View style={style.current.monthView}>{weeks}</View>;
+  };
+  const shouldDisplayIndicator = useMemo(() => {
+    if (currentMonth) {
+      const lastMonthOfDay = toMarkingFormat(currentMonth.clone().addMonths(1, true).setDate(1).addDays(-1));
+      if (displayLoadingIndicator && !markedDates?.[lastMonthOfDay]) {
+        return true;
+      }
+    }
+    return false;
+  }, [currentMonth, displayLoadingIndicator, markedDates]);
+  const renderHeader = () => {
+    const headerProps = extractHeaderProps(props);
+    const ref = customHeader ? undefined : header;
+    const CustomHeader = customHeader;
+    const HeaderComponent = customHeader ? CustomHeader : CalendarHeader;
+    return (
+      <HeaderComponent
+        {...headerProps}
+        testID={`${testID}.header`}
+        style={headerStyle}
+        ref={ref}
+        month={currentMonth}
+        addMonth={addMonth}
+        displayLoadingIndicator={shouldDisplayIndicator}
+      />
+    );
+  };
+  const GestureComponent = enableSwipeMonths ? GestureRecognizer : View;
+  const swipeProps = {
+    onSwipe: (direction) => onSwipe(direction),
+  };
+  const gestureProps = enableSwipeMonths ? swipeProps : undefined;
+  return (
+    <GestureComponent {...gestureProps}>
+      <View
+        style={[style.current.container, propsStyle]}
+        testID={testID}
+        accessibilityElementsHidden={accessibilityElementsHidden} // iOS
+        importantForAccessibility={importantForAccessibility} // Android
+      >
         {renderHeader()}
         {renderMonth()}
       </View>
-    </GestureComponent>);
+    </GestureComponent>
+  );
 };
 export default Calendar;
 Calendar.displayName = 'Calendar';
 Calendar.propTypes = {
-    ...CalendarHeader.propTypes,
-    ...Day.propTypes,
-    theme: PropTypes.object,
-    firstDay: PropTypes.number,
-    displayLoadingIndicator: PropTypes.bool,
-    showWeekNumbers: PropTypes.bool,
-    style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
-    current: PropTypes.string,
-    initialDate: PropTypes.string,
-    minDate: PropTypes.string,
-    maxDate: PropTypes.string,
-    markedDates: PropTypes.object,
-    hideExtraDays: PropTypes.bool,
-    showSixWeeks: PropTypes.bool,
-    onDayPress: PropTypes.func,
-    onDayLongPress: PropTypes.func,
-    onMonthChange: PropTypes.func,
-    onVisibleMonthsChange: PropTypes.func,
-    disableMonthChange: PropTypes.bool,
-    enableSwipeMonths: PropTypes.bool,
-    disabledByDefault: PropTypes.bool,
-    headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
-    customHeader: PropTypes.any,
-    allowSelectionOutOfRange: PropTypes.bool
+  ...CalendarHeader.propTypes,
+  ...Day.propTypes,
+  theme: PropTypes.object,
+  firstDay: PropTypes.number,
+  displayLoadingIndicator: PropTypes.bool,
+  showWeekNumbers: PropTypes.bool,
+  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
+  current: PropTypes.string,
+  initialDate: PropTypes.string,
+  minDate: PropTypes.string,
+  maxDate: PropTypes.string,
+  markedDates: PropTypes.object,
+  hideExtraDays: PropTypes.bool,
+  showSixWeeks: PropTypes.bool,
+  onDayPress: PropTypes.func,
+  onDayLongPress: PropTypes.func,
+  onMonthChange: PropTypes.func,
+  onVisibleMonthsChange: PropTypes.func,
+  disableMonthChange: PropTypes.bool,
+  enableSwipeMonths: PropTypes.bool,
+  disabledByDefault: PropTypes.bool,
+  headerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),
+  customHeader: PropTypes.any,
+  allowSelectionOutOfRange: PropTypes.bool,
 };
diff --git a/node_modules/react-native-calendars/src/calendar/style.js b/node_modules/react-native-calendars/src/calendar/style.js
index 735afb5..e5d7a16 100644
--- a/node_modules/react-native-calendars/src/calendar/style.js
+++ b/node_modules/react-native-calendars/src/calendar/style.js
@@ -1,28 +1,36 @@
 import { StyleSheet } from 'react-native';
+
 import * as defaultStyle from '../style';
+
 export default function getStyle(theme = {}) {
-    const appStyle = { ...defaultStyle, ...theme };
-    return StyleSheet.create({
-        container: {
-            paddingLeft: 5,
-            paddingRight: 5,
-            backgroundColor: appStyle.calendarBackground
-        },
-        dayContainer: {
-            flex: 1,
-            alignItems: 'center'
-        },
-        emptyDayContainer: {
-            flex: 1
-        },
-        monthView: {
-            backgroundColor: appStyle.calendarBackground
-        },
-        week: {
-            marginVertical: appStyle.weekVerticalMargin,
-            flexDirection: 'row',
-            justifyContent: 'space-around'
-        },
-        ...(theme['stylesheet.calendar.main'] || {})
-    });
+  const appStyle = { ...defaultStyle, ...theme };
+  return StyleSheet.create({
+    container: {
+      paddingLeft: 5,
+      paddingRight: 5,
+      backgroundColor: appStyle.calendarBackground,
+    },
+    dayContainer: {
+      flex: 1,
+      alignItems: 'center',
+      paddingTop: 6,
+      paddingBottom: 12,
+      borderTopWidth: 0.3,
+      borderTopColor: '#AEAEB2',
+    },
+    emptyDayContainer: {
+      flex: 1,
+    },
+    monthView: {
+      backgroundColor: appStyle.calendarBackground,
+    },
+    week: {
+      marginVertical: appStyle.weekVerticalMargin,
+      paddingLeft: 5,
+      paddingRight: 5,
+      flexDirection: 'row',
+      justifyContent: 'space-around',
+    },
+    ...(theme['stylesheet.calendar.main'] || {}),
+  });
 }
